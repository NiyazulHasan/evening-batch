How to convert decimal to binary number
========================================

	10 - decimal number 
	1010 - binary number 

	2|10
         ---- 0
        2|5
	 ---- 1
	2|2
	 ---- 0		^
	  1		|
	 ----------------
	1010

How to convert binary number to decimal number
-----------------------------------------
	
	1010- binary number 
	10 - decimal number 

	1 0 1 0
	  	<---

	0*1 + 1*2 + 0*4 + 1*8 
	
	0 + 2 + 0 = 8 = 10


4) Bitwise operators
=====================

Bitwise AND operator (&)
-----------------------
Bitwise AND operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a & b;

		System.out.println(c); 
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	&  - 1010
			  <---
	0*1 + 1*2 +  0*4  + 1*8

	0 + 2 + 0 + 8 = 10
*/

Bitwise OR operator (|)
------------------------
Bitwise OR operator deals with binary numbers.

Truth table 
-----------
T	T	= T
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a | b;

		System.out.println(c); //15
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	|  - 1111
			  <----
	1*1 + 1*2 + 1*4 + 1*8 

	1 + 2 + 4 + 8 = 15
*/

Bitwise XOR operator (^)
-------------------------
Bitwise XOR operator deals with binary numbers.

Truth table 
------------
T	T	= F
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a ^ b;

		System.out.println(c); // 5
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	^  - 0101  <--

	1*1 + 0*2 + 1*4 + 0*8 

	1 + 0 + 4 + 0 = 5
*/


Bitwise NOT operator (~)
-----------------------
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(10);

		System.out.println(i); // -11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(23);

		System.out.println(i); // -24
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(-23);

		System.out.println(i); // 22
	}
}


5) Arithmetic operators 
=========================
% - modules 
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 5+6/3+7%10+6/10+20%10+6*4-25;

		System.out.println(i);
	}
}
/*
	5 + 6/3 + 7%10 + 6/10 + 20%10 + 6*4 - 25

	5 + 2 + 7 + 0 + 0 + 24 - 25

	14 + 24 - 25

	38 - 25 = 13
*/


6) Relational operators 
=========================
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 5); // true 

		System.out.println(10 < 5); // false 

		System.out.println(10 >= 5); // true 

		System.out.println(10 >= 10); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 == 10); // true 

		System.out.println(10 == 20); // false 

		System.out.println(10 != 20); // true 

		System.out.println(10 != 10); // false
	}
}

7) Shift operators 
===================

Right shift operator (>>)
--------------------------
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 >> 2;

		System.out.println(i); // 10/2*2
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 100 >> 4;

		System.out.println(i); // 100 / 2*2*2*2 = 6
	}
}


Left Shift operator (<<)
-------------------------
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 << 3;

		System.out.println(i); // 10 * 2*2*2 = 80
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i= 100 << 4;

		System.out.println(i); // 100 * 2*2*2*2 = 1600
	}
}


8) Unary operator 
===================

increment/decrement operator 
----------------------------

We have two types of increment operators.

1) Pre-increment 
	ex:
		++i;

2) Post-increment 
	ex:
		i++;


We have two types of decrement operators.

1) Pre-decrement 
	ex:
		--i;

2) Post-decrement 
	ex:
		i--;

POST increment/decrement operator 
=================================

Rule1: First Take 

Rule2: Then Change 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++); // 10
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		int j=i++;

		System.out.println(i+" "+j); //11  10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		int j=i-- + i--; //10+9

		System.out.println(i+" "+j); // 8  19
	}
}


PRE increment/decrement operator 
=================================

Rule1: First Change

Rule2: Then Take 

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
	
		System.out.println(++i); //11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i;
	
		System.out.println(i+" "+j); // 11   11
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=--i + --i; // 9 + 8 
	
		System.out.println(i+" "+j); // 8  17
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++ + ++i); //10+12 =22
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=100;

		100++;

		System.out.println(i); // C.T.E 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		byte b=127;

		b++;

		System.out.println(b); // -128 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(++(i++)); //C.T.E 
	}
}




































