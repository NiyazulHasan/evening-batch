2) Static block 
================
A static block is used to initialize the static variables.

A static block must and should declare immediately after the class using static keyword.

A static block will execute at the time of class loading.

We can declare static block as follow.

syntax:
-------
	//static block 
	static 
	{
		-
		- //set of statements 
		-
	}

ex:
----
class Test 
{
	//static block 
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");	
	}
}

ex:
----
class Test 
{
	//static variables 
	static int i;

	//static block
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{
		System.out.println(i);	//200
	}
}

3) Local block 
--------------
A local block is used to initialize the local variables.

A local block must and should declare inside the methods and constructors.

A local block will execute just like a normal statement.

We can declare local block as follow.

syntax:
	//local block 
	{
		-
		- //set of statements 
		-
	}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");

		//local block 
		{
			System.out.println("stmt2");
		}

		System.out.println("stmt3");
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		//local variable 
		int i;
		
		//local block 
		{
			i=300;
		}
		System.out.println(i);
	}
}

Operators
==========
Operator is a symbol which is used to perform some operations on operands.
ex:
	c = a + b; 

	Here a,b and c are operands.
	Here = and + are operators.

We have following list of operators in java.

1) Assignment operators 

2) Ternary operators 

3) Logical operators 

4) Bitwise operators  

5) Arithmetic operators 

6) Relational operators 

7) Shift operators 

8) Unary operators 


1) Assignment operators 
-------------------------
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		i=20;
		i=30;
		System.out.println(i); // 30
	}
}
Note:
-----
	Reinitialization is possible in java.

ex:
----
class Test 
{
	public static void main(String[] args) 
	{
		final int i=10;
		i=20;
		i=30;
		System.out.println(i); // C.T.E 
	}
}
Note:
------
	C.T.E : cannot assign a value to final variable

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=1,2,3,4,5;
		System.out.println(i); // C.T.E 
	}
}

ex:

class Test 
{
	//global variable 
	static int i=10;

	public static void main(String[] args) 
	{
		//local variable 
		int i=20;

		System.out.println(i); // 20
	}
}


ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i%=5; // i = i % 5;

		System.out.println(i); // 0
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i/=5; // i = i / 5;

		System.out.println(i); // 2
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i/=50; // i = i / 50;

		System.out.println(i); //0
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i+=5;

		System.out.println(i); //15
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i-=5; // i = i - 5 

		System.out.println(i); //5
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;

		i*=2; // i = i * 2 ;

		System.out.println(i); //20
	}
}

2) Ternary operators 
--------------------
syntax:
-------
	(condition)?value1:value2;

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (5>2)?true:false;

		System.out.println(b); // true
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		String s = (5>20)?"Hi":"Bye";

		System.out.println(s); // Bye
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		char ch = (true)?'t':'f';

		System.out.println(ch); // t
	}
}

Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		int max = (a>b)?a:b;

		System.out.println("The grestest of two numbers is ="+max);
	}
}


Q) Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();

		System.out.println("Enter the second number :");
		int b=sc.nextInt();

		System.out.println("Enter the third number :");
		int c=sc.nextInt();

		int max = (a>b)?((a>c)?a:c):((b>c)?b:c);

		System.out.println("The grestest of two numbers is ="+max);
	}
}

3) Logical operators 
======================

Logical AND operator (&&)
--------------------------
Logical AND operator deals with boolean values either true or false.

Truth table
-----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		System.out.println(true && true);
		System.out.println(true && false);
		System.out.println(false && true);
		System.out.println(false && false);
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (6<10);

		System.out.println(b); // true 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (6<1);

		System.out.println(b); // false
	}
}


Logical OR operator (||) 
------------------------
Logical OR operator deals with boolean values either true or false.

Truth table
--------------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		System.out.println(true || true); // true 
		System.out.println(true || false); // true
		System.out.println(false || true); // true
		System.out.println(false || false); // false
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) || (6<1);

		System.out.println(b);  // false 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) || (6<10);

		System.out.println(b);  // true 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) || (6<10);

		System.out.println(b);  // true 
	}
}


Logical NOT operator (!)
--------------------------
Logical NOT operator deals with boolean values either true or false.

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = !(5>2);

		System.out.println(b);  // false
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b = !(5>20);

		System.out.println(b);  // true 
	}
}

ex:
---

class Test 
{
	public static void main(String[] args) 
	{
		boolean b = (6>10) && (7<10) || (6==10);

		System.out.println(b); // false 
	}
}











