Anonymous Array 
===============
Sometimes we will declare an array without name such type of nameless array is called anonymous array.

The main objective of anonymous array is just for instance use.

We can declare anonymous array as follow.

ex:
	new int[]{10,20,30};
	new int[][]{{10,20,30},{40,50,60}};

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//caller method 
		sum(new int[]{10,20,30});
	}

	//static method  
	public static void sum(int[] arr)
	{
		int sum=0;

		for(int i:arr)
		{
			sum+=i;
		}

		System.out.println(sum);
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//caller method 
		System.out.println(sum(new int[]{10,20,30}));
	}

	//static method  
	public static int sum(int[] arr)
	{
		int sum=0;

		for(int i:arr)
		{
			sum+=i;
		}

		return sum;
	}
}

OOPS 
=====
OOPS stands for Object Oriented Programming System/Structure.

OOPS concept introduced to deal with real world entities using programming language.

A language is said to be object oriented if it supports following features.

ex:
	class
	object 
	Abstract 
	Encapsulation 
	Inheritance 
	Polymorphism 


class 
======
A class is a blue print of an object.

A class is a collection of objects.

A class is a logical entity.

We can declare a class as follow.

syntax:
------
	optional 
	|
	Modifier class class_name <extends> parent_classname
				  <implements> interface_name
	{
		-
		-
		-
	}

A class will accept following modifiers.
ex:
	default 	
	public 
	final 
	abstract 
	

Q) What is the difference between default class and public class?

default class					public class
-------------					----------------
To declare default class we should not use any  To declare public class we should use public 
keyword.					keyword.

ex:						ex:
	class A 					public class A 
	{						{
	}						}

If we declare any class as default then we can	If we declare any class as public then we can 
access that class within the package.		access that class within the package and outside the 						package.
						


Q) What is the difference between final class and abstract class?

final						abstract
------------					------------
To declare final class we will use final 	To declare abstract class we will use abstract 
keyword.					keyword.
ex:						ex:
	final class  A 					abstract class A 
	{						{
	}						}

Child creation is not possible.			Child creation is possible.

Object creation is possible.			Object creation is not possible.




object 
========
Object is a outcome of a blue print.

Object is an instance of a class. Here instance means allocating memory for our data members.

Object is a collection of properties and behaviours.
ex:
		Dog (object)
			|
	----------------------------------
	|				 |
properties				behaviours

> name 					> Eating 
> height 				> Barking 
> age 					> Running 
> color 				> Sleeping 
and etc. 				and etc.


Object is a physical entity.

It is possible to create more then one object in a single class.

We can declare object as follow.

syntax:
	class_name  reference_variable = new  constructor();
ex:
	Test  t  = new  Test();

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Test t1=new Test();
		Test t2=new Test();
		Test t3=new Test();

		System.out.println(t1.hashCode());
		System.out.println(t2.hashCode());
		System.out.println(t3.hashCode());

		System.out.println(t1);//Test@Hexadecimal 
		System.out.println(t2.toString());
		System.out.println(t3.toString());
	}
}

Object class
==============
Object class present in java.lang package.

It is a parent class for every java class.

Object class contains following methods.

ex:
	cmd> javap   java.lang.Object

	hashCode()
	toString()
	clone()
	wait()
	notify()
	notifyAll()
	getClass()
	and etc.
	
Data Hiding 
===========
The process of hiding object data within the class is called data hiding.

Using private modifier we can implements data hiding concept.

The main objective of data hiding is to provide security.

ex:
	class Account 
	{
		private double balance;
		-
		-
		-
	}

ex:
---
class Account 
{
	private double balance=10000d;
}

class Customer 
{
	public static void main(String[] args)
	{
		Account acc=new Account();
		System.out.println(acc.balance);//C.T.E 
	}
}

Abstraction 
=============
Hiding internal implementation and highlighting the set of services is called abstraction.

Using abstract classes and interfaces we can implements abstraction.

The best example of abstraction is GUI ATM machine where bank people will hide internal implementation and highlights the set of services like banking, withdrawl, mini statement and etc.

The main advantages of abstraction are.

1) It gives security because it will hide internal implementation.

2) Enhancement becomes more easy because without effecting enduser they can perform any changes 
   in our internal system. 

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.


Encapsulation 
================
The process of encapsulating or grouping or binding variables and it's associate methods in a single entity is called encapsulation.

Encapsulation is implemented by seeing capsule.

Diagram: java17.1

Abstraction is used to hide the data and encapsulation is used to protect the data.

A class is said to be encapsulated class if it supports data hiding and abstraction.

In encapsulation for every variable we need to write setter and getter methods.

The main advantages of encapsulation are.

1) It gives security.

2) Enhancement becomes more easy.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application 
 
ex:
----
class Student 
{
	//current class variables 
	private int studId;
	private String studName;

	//setter methods 
	public void setStudId(int studId)
	{
		this.studId=studId;
	}
	public void setStudName(String studName)
	{
		this.studName=studName;
	}

	//getter methods 
	public int getStudId()
	{
		return studId;
	}
	public String getStudName()
	{
		return studName;
	}
}
class Test
{
	public static void main(String[] args)
	{
		Student s=new Student();
		s.setStudId(101);
		s.setStudName("Alan");

		System.out.println("Student Id : "+s.getStudId());
		System.out.println("Student Name : "+s.getStudName());

	}
}





































