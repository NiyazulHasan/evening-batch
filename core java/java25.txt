Exception Handling 
===================
Q) What is the difference between Exception and Error?

Exception 
---------
	Exception is a problem for which we can provide solution programmatically.
	Exception will occur due to syntax errors.
	ex:
		ArithmeticException 
		FileNotFoundException 
		IllegalArgumentException 
Error 
-----
	Error is a problem for which we can't provide solution programmatically.
	Error will occur due to lack of system resources.
	ex:
		OutOfMemoryError 
		StackOverFlowError 
		LinkageError 

As part of java application development it is a responsibility of a programmer to provide smooth termination for every java program.

We have two types of terminations.

1) Smooth termination / Graceful termination 

2) Abnormal termination 


1) Smooth termination
-----------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination.
ex:
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
}

2) Abnormal termination 
-----------------------
During the program execution suppose if we are getting some interruptions in the middle of the program such type of termination is called abnormal termination.
ex:

class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

If any exception raised in our program we must and should handle that exception otherwise our program will terminates abnormally.

Here exception will display name of the exception, description of the exception and line number of the exception.

Exception 
==========
It is a unwanted, unexpected event which disturbs normal flow of our program.

Exceptions always raised at runtime so they are also known as runtime events.

The main object of exception handling is to provide graceful termination.

In java, exceptions are divided into two types.

1) Predefined exceptions 

2) Userdefined exceptions 


1) Predefined exceptions 
-------------------------
Built-In exceptions are called predefined exceptions.

It is classified into two types.

i) checked exceptions 
---------------------
Exceptions which are checked by the compiler at the time of compilation is called checked exceptions.
ex:
	InterruptedException 
	IOException 
	EOFException 
	and etc.

ii) unchecked exceptions 
------------------------
Exceptions which are checked by the JVM at the time of runtime is called unchecked exceptions.
ex:
	ArithmeticException 
	IllegalArgumentException 
	ClassCastException
	and etc.

Diagram: java25.1

If any checked exception raised in our program we must and should handle that exception by using try and catch block.

try block
---------
It is a block which contains risky code.

If any exception raised in try block then it won't be executed.

It is used to throw the exception to catch block.

It is associate with catch block.


catch block
------------
It is a block which contains error handling code.

It is used to catch the exception which is thrown by try block.

If there is no exception in try block then catch block will not execute.

It is always associate with try block.

A catch block will take exception name as a parameter and that name must match with exception class name.

syntax:
------
	try 
	{
		- // Risky code 
	}
	catch(ArithmeticException ae)
	{
		- // Error Handling code 
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p;
	stmt1
	catch-block

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RE");
		}
	}
}

Various methods to display exception details
=========================================
Throwable class defines following three methods to display exception details.

1) printStackTrace()
-------------------
It is used to display name of the exception, description of the exception and line number of the excpetion.

2) toString() 
-------------
It is used to display name of the exception and description of the exception.

3) getMessage() 
-----------------
It is used to display description of the exception.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			ae.printStackTrace();

			System.out.println("==================");

			System.out.println(ae.toString());

			System.out.println("==================");

			System.out.println(ae.getMessage());
		}
		
	}
}

We can handle multiple exceptions in a single catch block.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			//System.out.println(10/0);

			//Thread.currentThread().setPriority(11);

			int[] arr=null;
			System.out.println(arr[0]);
		}
		catch(ArithmeticException | IllegalArgumentException | NullPointerException e)
		{
			e.printStackTrace();
		}
		
	}
}

finally block 
==============
It is never recommanded to maintain cleanup code in try block because if any exception raised in try block then try block won't be executed.

It is never recommanded to maintain cleanup code in catch block because if there is no exception in try block then catch block won't be executed.

But we need to place where we can maintain cleanup code and it should execute irrespective of exception raised or not. Such block is called finally block.

syntax;
-------
	try 
	{
		- //risky code 	
	}
	catch(Exception e)
	{
		- //error handling code 
	}
	finally
	{
		- //cleanup code 
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}
o/p:
	try-block 
	finally-block 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        	at Test.main(Test.java:7)
	finally-block


A try with finally combination is valid in java.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}
o/p:
	try-block 
	finally-block 



Interview Question
------------------

Q) What is garbage collection and in how many ways we can call garbage collector?

Garbage collector is used to destroy unused or useless objects from java.

There are two ways to call garbage collector in java.

1) System.gc() 

2) Runtime.getRuntime().gc()


class Test  
{
	//instance variable 
	int i=10;

	public static void main(String[] args) 
	{	
		Test t=new Test();
		System.out.println(t.i);//10

		t=null;
		System.gc();
	}
	public void finalize()
	{
		System.out.println("garbage collector called");
	}
}

ex:
---
class Test  
{
	//instance variable 
	int i=10;

	public static void main(String[] args) 
	{	
		Test t=new Test();
		System.out.println(t.i);//10

		t=null;
		Runtime.getRuntime().gc();
	}
	public void finalize()
	{
		System.out.println("garbage collector called");
	}
}















































































































