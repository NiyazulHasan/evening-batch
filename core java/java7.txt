Main method 
===========
Our program contains main method or not. Either it is property declare or not. It is a not a responsibility of a compiler to check. It is a responsibility of JVM to check for main method.

If JVM won't find main method then it will throw one runtime error called main method not found.

JVM always tooks for main method with following signature.

ex:
	public static void main(String[] args)

If we perform any changes in above signature then JVM will throw one runtime eror. 

public 
-----
	JVM wants to call main method from anywhere.

static
------
	JVM wants to call main method without using object reference.

void 
------
	Main method does not return anything to JVM.

main
---
	It is a identifier given to a main method.

String[] args
------------
	It is a command line argument.


Various ways to perform the changes in main method
--------------------------------------------------
1) Order of modifiers is not important incase of public static we can take static public also.
   ex:
	static public void main(String[] args)
	

2) We can replace String[] in following acceptable formats.
   ex:
	public static void main(String[] args)
	public static void main(String args[])
	public static void main(String []args)

3) We replace String[] with var-arg parameter.
   ex:
	public static void main(String... args)	

4) We can change args with any java valid identifier.
   ex:
	public static void main(String[] ihub)	

5) Main method will accept following modifiers.
   ex:
	synchronized, strictfp and  final 

System.out.println()
=====================
It is a output statement in java.

Whenever we want to display any variable or data then we need to use output statement.

syntax:
-------	
	static variable 
		|
	System.out.println();
	|		|
predefined 		predefined method 
final class

Diagram: java7.1

ex:

class Test
{
	public static void main(String[] args)
	{
		System.out.println("stmt1");
		System.out.print("stmt2");
		System.out.printf("stmt3");
	}
}

Various ways to display the data
--------------------------------
1) 
	System.out.println("Hello World");


2)
	int i=10;
	System.out.println(i);
	System.out.println("The value is ="+i);

3) 
	int i=10,j=20;
	System.out.println(i+" "+j);

4)
	int i=1,j=2,k=3;
	System.out.println(i+" "+j+" "+k);


Fully Qualified Name 
=======================
Fully qualified name means we need to declare a class or interface along with package name.

Fully qualified name will improve readability of our code.

Fully qualified name we need to use when we are using same class which is present in two different packages.

ex:
---
class Test
{
	public static void main(String[] args)
	{
		java.util.Date d=new java.util.Date();
		System.out.println(d);
	}
}

Import statements
==================
Whenever we use import statement we should not use fully qualified name.

Using short name also can achieve.

In java, we have three types of import statements.

1) Explicit class import 

2) Implicit class import 

3) Static import 

1) Explicit class import 
-------------------------
This type of import statement is highly recommanded to use because it will improve readability of our code.

ex:
---
import java.util.Date;
class Test
{
	public static void main(String[] args)
	{
		Date d=new Date();		
		System.out.println(d);
	}
}

ex:

import java.time.LocalDate;
import java.time.LocalTime;
class Test
{
	public static void main(String[] args)
	{
		LocalDate date = LocalDate.now();

		LocalTime time = LocalTime.now();
		
		System.out.println(date);
		System.out.println(time);
	}
}


2) Implicit class import 
------------------------
This type of import statement is not recommanded to use because it will reduce readability of our code.

ex:
import java.time.*;
class Test
{
	public static void main(String[] args)
	{
		LocalDate date = LocalDate.now();

		LocalTime time = LocalTime.now();
		
		System.out.println(date);
		System.out.println(time);
	}
}

3) Static import 
-------------------
Using static import we can access static members directly.

Often use of static import makes our program complex and unreadable.

ex:
---
import static java.lang.System.*;
class Test
{
	public static void main(String[] args)
	{
		out.println("stmt1");
		out.println("stmt2");
		out.println("stmt3");		
	}
}

ex:
--
import static java.lang.System.*;
class Test
{
	public static void main(String[] args)
	{
		out.println("stmt1");
		exit(0);
		out.println("stmt3");		
	}
}





















