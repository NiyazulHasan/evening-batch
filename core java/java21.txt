Interfaces
==========
It is a collection of zero or more abstract methods. 

Abstract methods are in-complete methods because they ends with semicolon and don't have any body.

ex:
	void m1();

It is not possible to create object for interfaces.

To write the implementation of abstract methods of an interface we will use implementation class.

It is possible to create object for implementation class because it contains method with body.

By default every abstract method is a public and abstract.
ex:
	public abstract void m1();

Interface contains only constants i.e public static final.

syntax:
------
	interface <interface_name>
	{
		-
		- //abstract methods 		
		- //constants 
		-
	}

If we know only service requirement specification then we need to use interface.

Diagram: java21.1

ex:
----
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	@Override 
    	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a = new B();
		a.m1();
	}
}


ex:
----
interface A 
{
	public abstract void m1();
}

class Test  
{
	public static void main(String[] args) 
	{
		//Anonymous inner class
		A a = new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we must and should override all methods.

ex:
---

interface A 
{
	void show();
	public void display();
	abstract void see();
	public abstract void view();
}
class B implements A 
{
	@Override 
	public void show()
	{
		System.out.println("Show-Method");
	}
	@Override 
	public void display()
	{
		System.out.println("Display-Method");
	}
	@Override 
	public void see()
	{
		System.out.println("See-Method");
	}
	@Override 
	public void view()
	{
		System.out.println("View-Method");
	}
}

class Test  
{
	public static void main(String[] args) 
	{
		A a = new B();
		a.show();
		a.display();
		a.see();
		a.view();
	}
}

Interface can extends more then one interface.

ex:
---
interface A 
{
	void m1();
}
interface B 
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	@Override 
	public void m1()
	{
		System.out.println("M1-Method");
	}
	@Override
	public void m2()
	{
		System.out.println("M2-Method");
	}
	@Override
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		C c = new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more than one interface.

ex:
---
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother 
{
	@Override 
	public void height()
	{
		float height = (Father.HT+Mother.HT)/2;
		System.out.println("Child Height :"+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}

Note:
-----
Interface is a collection of abstract methods, default methods and static methods.


Abstract classes 
================
It is a collection of zero or more abstract methods and zero or more concrete methods.

A abstract keyword is applicable for classes and methods but not for variables.

It is not possible to create object for abstract classes.

To write the implementation of abstract methods we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
-------
	abstract  class <class_name>
	{
		-
		- //abstract methods 
		- //concrete methods 
		- //instance variables 
		-	
	}

If we know partial implementation then we need to use abstract class.

ex:
----
abstract class Animal
{
	//instance variable 
	int age=5;

	//abstract method 
	public abstract void sound();

	//concrete method
	public void color()
	{
		System.out.println("Brown");
	}
}
class Dog extends Animal 
{
	@Override 
	public void sound()
	{
		System.out.println("Bow Bow");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Dog d=new Dog();
		d.sound();
		d.color();
		System.out.println(d.age);
	}
}


Q) What is the difference between interface and abstract class?

interface 					abstract class
--------------					--------------
To declare interface we will use interface 	To declare abstract class we will use abstract 
keyword.					keyword.

It is a collection of abstract methods, default	It is a collection of abstract methods and 
methods and static methods.			concrete methods.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

It contains constants.				It contains instance variables.

It does not support constructor.		It supports constructor.

It does not allow blocks.			It allows blocks.

If we know only specification then we need 	If we know only partial implementation then we need
to use interface.				to use abstract class.




Q) What is marker interface?

Interface which does not have any method or constant is called marker interface.

In general, empty interface is called marker interface.

Using marker interface we will get some ability to do.

We have following list of marker interfaces in java.

ex:
	Serializable 
	Cloneable 
	Remote 
	and etc.





























