Optional
========
Optional class introduced in Java 8.

It is a final class which is present in java.util package.

The main objective of Optional class is to handle null checks.

We can create Optional class object as follow.

ex:
	Optional<Object> optional=Optional.ofNullable();

ex:
---
class Test  
{
	int i=10,j=20;

	public static void main(String[] args) 
	{
		Test t=null;
		
		System.out.println(t.i+" "+t.j);//R.E NullPointerException
	}
}

ex:
---
import java.util.*;
class Test  
{
	int i=10,j=20;

	public static void main(String[] args) 
	{
		Test t=null;
		
		Optional<Object> optional=Optional.ofNullable(t);

		if(!optional.isPresent())
		{
			t=new Test();
		}

		System.out.println(t.i+" "+t.j);//10  20
	}
}

Stream API 
==========
Stream API introduced in Java 8.

Stream API present in java.util.stream package.

It allows functional-style programming on Collections of data(objects)

It is used to process sequence of objects and makes our code readable and concise.

In short, Stream API is used to perform bulk operations on Collections.

ex:
----
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,2,1,3,5,8,10,7);

		List<Integer> newList= list.stream().filter(i->i%2==0).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,2,1,3,5,8,10,7);

		List<Integer> newList= list.stream().sorted().collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,2,1,3,5,8,10,7);

		List<Integer> newList= list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,2,1,3,5,8,10,7);

		long min= list.stream().min((i1,i2)-> i1.compareTo(i2)).get();

		System.out.println(min);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,2,1,3,5,8,10,7);

		long max= list.stream().max((i1,i2)-> i1.compareTo(i2)).get();

		System.out.println(max);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(1,2,2,3,3,3,4,4,4,4);

		List<Integer> newList= list.stream().distinct().collect(Collectors.toList());

		System.out.println(newList);
	}
}


forEach() method
================
A forEach() method introduced in Java 8.

It is used to iterate the elements/objects from Collections.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = Arrays.asList(3,4,1,8,6,9,7);

		list.forEach(element -> System.out.print(element+" "));
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<Integer,String> map=new LinkedHashMap<Integer,String>();
		map.put(1,"one");
		map.put(2,"two");
		map.put(3,"three");

		map.forEach((key,value) -> System.out.println(key+"="+value));
	}
}


Method Reference (::)
======================
Method reference introduced in Java 8.

It is a special type of lamda expression.

In java, a method reference is a concise way to rfer to a method or constructor rather than writing the entire method call.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String[] sarr={"java","python","dotnet","android"};

		List<String> list = List.of(sarr);

		list.forEach(System.out::println);
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<Integer,String> map=Map.of(1,"one",2,"two",3,"three");

		map.forEach(Test::mapEntry);
	}

	//callie method 
	public static void mapEntry(Integer key,String value)
	{
		System.out.println(key+"="+value);
	}
}


Interview Question 
==================

Q) Write a java program to display employee details in sorting order of employee id?


import java.util.*;
import java.util.stream.*;

class Employee 
{
	private int empId;
	private String empName;
	private double empSal;

	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		list.add(new Employee(104,"Alan",4000d));
		list.add(new Employee(102,"Ben",2000d));
		list.add(new Employee(103,"Mark",3000d));
		list.add(new Employee(101,"Jose",1000d));

		List<Employee> newList=list.stream().sorted(Comparator.comparingInt(Employee::getEmpId)).collect(Collectors.toList());

		newList.forEach(emp -> System.out.println(emp.getEmpId()+" "+emp.getEmpName()+" "+emp.getEmpSal()));
	}
}














































